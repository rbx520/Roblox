-- 极简 UI 库（保留旧 API，去花哨）
-- 依赖 _CONFIGS.UI_NAME（若不存在，使用 "SimpleUI"）
local Services = setmetatable({}, {
    __index = function(_, k) return game:GetService(k) end
})
local UI_NAME = (getgenv()._CONFIGS and getgenv()._CONFIGS.UI_NAME) or "SimpleUI"

-- 清理旧 UI
pcall(function()
    local cg = Services.CoreGui
    if cg:FindFirstChild(UI_NAME) then cg[UI_NAME]:Destroy() end
end)

-- 颜色（固定深色风格）
local Colors = {
    Bg     = Color3.fromRGB(34, 34, 38),
    Panel  = Color3.fromRGB(44, 44, 50),
    Line   = Color3.fromRGB(60, 60, 66),
    Text   = Color3.fromRGB(235, 235, 235),
    Muted  = Color3.fromRGB(170, 170, 170),
    Accent = Color3.fromRGB(88, 101, 242)
}

-- 工具
local function New(inst, props, parent)
    local obj = Instance.new(inst)
    if props then
        for k, v in pairs(props) do obj[k] = v end
    end
    if parent then obj.Parent = parent end
    return obj
end

-- library 基础
local library = getgenv().library or {}
getgenv().library = library
library.flags = library.flags or {
    GetState = function(_, key)
        return library.flags[key] and library.flags[key].State or nil
    end
}

-- 主 UI
local gui = New("ScreenGui", {Name = UI_NAME, ZIndexBehavior = Enum.ZIndexBehavior.Sibling}, Services.CoreGui)
local main = New("Frame", {
    Name = "Main",
    Size = UDim2.fromOffset(460, 300),
    Position = UDim2.fromScale(0.5, 0.5),
    AnchorPoint = Vector2.new(0.5, 0.5),
    BackgroundColor3 = Colors.Bg,
    BorderSizePixel = 0,
    Active = true,
    Draggable = true
}, gui)
New("UICorner", {CornerRadius = UDim.new(0, 6)}, main)

-- Header（保持路径：Main.Header.Title，兼容你的彩虹标题）
local header = New("Frame", {
    Name = "Header",
    Size = UDim2.new(1, -12, 0, 28),
    Position = UDim2.new(0, 6, 0, 6),
    BackgroundColor3 = Colors.Panel,
    BorderSizePixel = 0
}, main)
New("UICorner", {CornerRadius = UDim.new(0, 6)}, header)

local titleLabel = New("TextLabel", {
    Name = "Title",
    BackgroundTransparency = 1,
    Size = UDim2.new(1, -80, 1, 0),
    Position = UDim2.new(0, 8, 0, 0),
    Font = Enum.Font.SourceSansBold,
    Text = UI_NAME,
    TextColor3 = Colors.Text,
    TextSize = 15,
    TextXAlignment = Enum.TextXAlignment.Left
}, header)

-- 隐藏按钮
local hideBtn = New("TextButton", {
    Size = UDim2.fromOffset(56, 24),
    Position = UDim2.new(1, -62, 0.5, -12),
    BackgroundColor3 = Colors.Panel,
    BorderSizePixel = 0,
    Text = "隐藏",
    Font = Enum.Font.SourceSansBold,
    TextSize = 14,
    TextColor3 = Colors.Text
}, header)
New("UICorner", {CornerRadius = UDim.new(0, 6)}, hideBtn)

local visible = true
hideBtn.MouseButton1Click:Connect(function()
    visible = not visible
    main.Visible = visible
    hideBtn.Text = visible and "隐藏" or "显示"
end)

-- 左侧 Tab 列表
local sidebar = New("Frame", {
    Name = "Sidebar",
    Size = UDim2.new(0, 110, 1, -52),
    Position = UDim2.new(0, 6, 0, 40),
    BackgroundColor3 = Colors.Panel,
    BorderSizePixel = 0
}, main)
New("UICorner", {CornerRadius = UDim.new(0, 6)}, sidebar)

local tabList = New("ScrollingFrame", {
    Name = "TabButtons",
    Size = UDim2.fromScale(1, 1),
    CanvasSize = UDim2.new(),
    ScrollBarThickness = 3,
    BackgroundTransparency = 1
}, sidebar)
local tabListLayout = New("UIListLayout", {
    Padding = UDim.new(0, 6),
    HorizontalAlignment = Enum.HorizontalAlignment.Center,
    SortOrder = Enum.SortOrder.LayoutOrder
}, tabList)
New("UIPadding", {PaddingTop = UDim.new(0, 6)}, tabList)

tabListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
    tabList.CanvasSize = UDim2.new(0, 0, 0, tabListLayout.AbsoluteContentSize.Y + 6)
end)

-- 右侧内容区
local holder = New("Frame", {
    Name = "TabHolder",
    Size = UDim2.new(1, -128, 1, -52),
    Position = UDim2.new(0, 122, 0, 40),
    BackgroundColor3 = Colors.Panel,
    BorderSizePixel = 0
}, main)
New("UICorner", {CornerRadius = UDim.new(0, 6)}, holder)

-- 通知（使用 Roblox 原生通知）
function library:Notify(args)
    args = args or {}
    local ok, err = pcall(function()
        game.StarterGui:SetCore("SendNotification", {
            Title = args.Title or "提示",
            Text = args.Text or "",
            Duration = args.Duration or 4
        })
    end)
    if not ok then warn("Notify failed:", err) end
end

-- 可选：确认通知（Yes/No），简单用 BindableFunction
function library:SelectNotify(args)
    args = args or {}
    local bf = Instance.new("BindableFunction")
    bf.OnInvoke = function(choice)
        if args.Callback then
            args.Callback(choice == (args.TrueText or "Yes"))
        end
    end
    pcall(function()
        game.StarterGui:SetCore("SendNotification", {
            Title = args.Title or "确认",
            Text = args.Text or "",
            Duration = args.Duration or 5,
            Button1 = args.TrueText or "Yes",
            Button2 = args.FalseText or "No",
            Callback = bf
        })
    end)
end

-- 当前 Tab
library.currentTab = library.currentTab or nil

-- 构建 Tab
function library:CreateTab(tabName)
    -- 按钮
    local btn = New("TextButton", {
        Size = UDim2.new(1, -12, 0, 30),
        BackgroundColor3 = Colors.Bg,
        BorderSizePixel = 0,
        AutoButtonColor = true,
        Text = tabName,
        Font = Enum.Font.SourceSansSemibold,
        TextSize = 14,
        TextColor3 = Colors.Text
    }, tabList)
    New("UICorner", {CornerRadius = UDim.new(0, 6)}, btn)

    -- 内容
    local content = New("ScrollingFrame", {
        Name = "Tab",
        Parent = holder,
        Size = UDim2.fromScale(1, 1),
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        ScrollBarThickness = 3,
        Visible = false
    })
    local pad = New("UIPadding", {PaddingTop = UDim.new(0, 6), PaddingLeft = UDim.new(0, 6), PaddingRight = UDim.new(0, 6)}, content)
    local layout = New("UIListLayout", {Padding = UDim.new(0, 6), SortOrder = Enum.SortOrder.LayoutOrder, HorizontalAlignment = Enum.HorizontalAlignment.Center}, content)
    layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        content.CanvasSize = UDim2.new(0, 0, 0, layout.AbsoluteContentSize.Y + 12)
    end)

    -- 首个 tab 默认选中
    if library.currentTab == nil then
        library.currentTab = {content = content, button = btn}
        content.Visible = true
        btn.BackgroundColor3 = Colors.Accent
    end

    -- 切换逻辑
    btn.MouseButton1Click:Connect(function()
        if library.currentTab and library.currentTab.content ~= content then
            library.currentTab.content.Visible = false
            library.currentTab.button.BackgroundColor3 = Colors.Bg
        end
        library.currentTab = {content = content, button = btn}
        content.Visible = true
        btn.BackgroundColor3 = Colors.Accent
    end)

    -- Tab API
    local api = {}

    function api:NewSeparator()
        New("Frame", {
            Size = UDim2.new(1, -12, 0, 1),
            BackgroundColor3 = Colors.Line,
            BorderSizePixel = 0,
            Parent = content
        })
    end

    function api:NewButton(text, callback)
        local b = New("TextButton", {
            Size = UDim2.new(1, -12, 0, 32),
            BackgroundColor3 = Colors.Bg,
            BorderSizePixel = 0,
            AutoButtonColor = true,
            Text = "  " .. text,
            Font = Enum.Font.SourceSansSemibold,
            TextSize = 14,
            TextColor3 = Colors.Text,
            Parent = content,
            TextXAlignment = Enum.TextXAlignment.Left
        })
        New("UICorner", {CornerRadius = UDim.new(0, 6)}, b)
        b.MouseButton1Click:Connect(function()
            if callback then pcall(callback) end
        end)
    end

    function api:NewToggle(text, flag, default, callback)
        library.flags[flag or text] = library.flags[flag or text] or {State = default == true}
        local holder = New("Frame", {
            Size = UDim2.new(1, -12, 0, 32),
            BackgroundColor3 = Colors.Bg,
            BorderSizePixel = 0,
            Parent = content
        })
        New("UICorner", {CornerRadius = UDim.new(0, 6)}, holder)

        local label = New("TextLabel", {
            BackgroundTransparency = 1,
            Size = UDim2.new(1, -50, 1, 0),
            Position = UDim2.new(0, 8, 0, 0),
            Font = Enum.Font.SourceSansSemibold,
            Text = text,
            TextColor3 = Colors.Text,
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left,
            Parent = holder
        })

        local box = New("TextButton", {
            Size = UDim2.fromOffset(22, 22),
            Position = UDim2.new(1, -28, 0.5, -11),
            BackgroundColor3 = Colors.Panel,
            BorderSizePixel = 0,
            Text = "",
            Parent = holder
        })
        New("UICorner", {CornerRadius = UDim.new(0, 4)}, box)

        local tickMark = New("Frame", {
            Size = UDim2.fromOffset(14, 14),
            Position = UDim2.new(0.5, -7, 0.5, -7),
            BackgroundColor3 = library.flags[flag or text].State and Colors.Accent or Colors.Muted,
            BorderSizePixel = 0,
            Parent = box
        })
        New("UICorner", {CornerRadius = UDim.new(0, 3)}, tickMark)

        local function setState(v)
            library.flags[flag or text].State = v and true or false
            tickMark.BackgroundColor3 = v and Colors.Accent or Colors.Muted
            if callback then pcall(callback, v) end
        end
        setState(library.flags[flag or text].State)
        box.MouseButton1Click:Connect(function() setState(not library.flags[flag or text].State) end)
    end

    -- 签名兼容：NewSlider(text, flag, default, min, max, float, callback)
    function api:NewSlider(text, flag, default, min, max, float, callback)
        library.flags[flag] = library.flags[flag] or {State = default or min}
        local holder = New("Frame", {
            Size = UDim2.new(1, -12, 0, 48),
            BackgroundColor3 = Colors.Bg,
            BorderSizePixel = 0,
            Parent = content
        })
        New("UICorner", {CornerRadius = UDim.new(0, 6)}, holder)

        local title = New("TextLabel", {
            BackgroundTransparency = 1,
            Size = UDim2.new(0.6, 0, 0, 16),
            Position = UDim2.new(0, 8, 0, 5),
            Font = Enum.Font.SourceSansSemibold,
            Text = text,
            TextColor3 = Colors.Text,
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left,
            Parent = holder
        })

        local valueBox = New("TextBox", {
            Size = UDim2.fromOffset(60, 20),
            Position = UDim2.new(1, -68, 0, 5),
            BackgroundColor3 = Colors.Panel,
            BorderSizePixel = 0,
            Font = Enum.Font.SourceSansBold,
            Text = tostring(library.flags[flag].State),
            TextColor3 = Colors.Accent,
            TextSize = 13,
            Parent = holder,
            ClearTextOnFocus = false
        })
        New("UICorner", {CornerRadius = UDim.new(0, 4)}, valueBox)

        local bar = New("Frame", {
            Size = UDim2.new(1, -16, 0, 8),
            Position = UDim2.new(0, 8, 0, 28),
            BackgroundColor3 = Colors.Line,
            BorderSizePixel = 0,
            Parent = holder
        })
        New("UICorner", {CornerRadius = UDim.new(0, 4)}, bar)

        local fill = New("Frame", {
            Size = UDim2.new(0, 0, 1, 0),
            BackgroundColor3 = Colors.Accent,
            BorderSizePixel = 0,
            Parent = bar
        })
        New("UICorner", {CornerRadius = UDim.new(0, 4)}, fill)

        local knob = New("Frame", {
            Size = UDim2.fromOffset(12, 12),
            Position = UDim2.new(0, -6, 0.5, -6),
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            BorderSizePixel = 0,
            Parent = bar
        })
        New("UICorner", {CornerRadius = UDim.new(0, 6)}, knob)

        local function setVal(v)
            v = tonumber(v) or min
            v = math.clamp(v, min, max)
            if float then
                v = tonumber(string.format("%.2f", v))
            else
                v = math.floor(v + 0.5)
            end
            library.flags[flag].State = v
            valueBox.Text = tostring(v)
            local t = (v - min) / (max - min)
            fill.Size = UDim2.new(t, 0, 1, 0)
            knob.Position = UDim2.new(t, -6, 0.5, -6)
            if callback then pcall(callback, v) end
        end
        setVal(default or min)

        local dragging = false
        local function updateFromMouse()
            local x = Services.Players.LocalPlayer:GetMouse().X
            local pos = bar.AbsolutePosition.X
            local size = bar.AbsoluteSize.X
            local percent = math.clamp((x - pos) / size, 0, 1)
            local v = min + (max - min) * percent
            if not float then v = math.floor(v + 0.5) end
            setVal(v)
        end
        bar.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = true
                updateFromMouse()
            end
        end)
        knob.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = true
                updateFromMouse()
            end
        end)
        Services.UserInputService.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then dragging = false end
        end)
        Services.RunService.RenderStepped:Connect(function()
            if dragging then updateFromMouse() end
        end)
        valueBox.FocusLost:Connect(function()
            setVal(valueBox.Text)
        end)
    end

    -- 签名：NewDropdown(text, flag, options, callback) + AddOption/RemoveOption/SetOptions/ClearOptions
    function api:NewDropdown(text, flag, options, callback)
        options = options or {}
        library.flags[flag] = library.flags[flag] or { State = options[1] }

        local holder = New("Frame", {
            Size = UDim2.new(1, -12, 0, 32),
            BackgroundColor3 = Colors.Bg,
            BorderSizePixel = 0,
            Parent = content,
            ClipsDescendants = true
        })
        New("UICorner", {CornerRadius = UDim.new(0, 6)}, holder)

        local btn = New("TextButton", {
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 0, 32),
            Text = "  " .. text .. " - " .. (library.flags[flag].State or ""),
            Font = Enum.Font.SourceSansSemibold,
            TextSize = 14,
            TextColor3 = Colors.Text,
            TextXAlignment = Enum.TextXAlignment.Left,
            Parent = holder
        })

        local arrow = New("TextLabel", {
            BackgroundTransparency = 1,
            Size = UDim2.fromOffset(20, 32),
            Position = UDim2.new(1, -24, 0, 0),
            Font = Enum.Font.SourceSansBold,
            Text = "v",
            TextSize = 14,
            TextColor3 = Colors.Muted,
            Parent = btn
        })

        local list = New("ScrollingFrame", {
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 0, 0, 32),
            Size = UDim2.new(1, 0, 0, 0),
            ScrollBarThickness = 3,
            Visible = false,
            Parent = holder
        })
        local lyl = New("UIListLayout", {Padding = UDim.new(0, 4)}, list)
        New("UIPadding", {PaddingTop = UDim.new(0, 4), PaddingLeft = UDim.new(0, 6), PaddingRight = UDim.new(0, 6)}, list)

        local isOpen = false
        local function toggle()
            isOpen = not isOpen
            list.Visible = isOpen
            local target = isOpen and math.min(#list:GetChildren() * 24 + 12, 140) or 0
            holder.Size = UDim2.new(1, -12, 0, 32 + target)
            list.Size = UDim2.new(1, 0, 0, target)
            arrow.Rotation = isOpen and 180 or 0
        end
        btn.MouseButton1Click:Connect(toggle)

        local function rebuild()
            for _, c in pairs(list:GetChildren()) do
                if c:IsA("TextButton") then c:Destroy() end
            end
            for _, opt in ipairs(options) do
                local optBtn = New("TextButton", {
                    Size = UDim2.new(1, -12, 0, 22),
                    BackgroundColor3 = Colors.Panel,
                    BorderSizePixel = 0,
                    Text = opt,
                    Font = Enum.Font.SourceSans,
                    TextSize = 13,
                    TextColor3 = Colors.Muted,
                    Parent = list
                })
                New("UICorner", {CornerRadius = UDim.new(0, 4)}, optBtn)
                optBtn.MouseButton1Click:Connect(function()
                    library.flags[flag].State = opt
                    btn.Text = "  " .. text .. " - " .. opt
                    toggle()
                    if callback then pcall(callback, opt) end
                end)
            end
            list.CanvasSize = UDim2.new(0, 0, 0, lyl.AbsoluteContentSize.Y + 8)
        end
        rebuild()

        -- 动态 API
        function library.flags[flag]:SetOptions(newOpts) options = newOpts or {}; rebuild() end
        function library.flags[flag]:ClearOptions() options = {}; rebuild() end
        function library.flags[flag]:AddOption(opt)
            table.insert(options, opt); rebuild()
        end
        function library.flags[flag]:RemoveOption(opt)
            for i, v in ipairs(options) do
                if v == opt then table.remove(options, i) break end
            end
            rebuild()
        end
    end

    function api:NewBox(text, placeholder, callback)
        local holder = New("Frame", {
            Size = UDim2.new(1, -12, 0, 32),
            BackgroundColor3 = Colors.Bg,
            BorderSizePixel = 0,
            Parent = content
        })
        New("UICorner", {CornerRadius = UDim.new(0, 6)}, holder)

        local label = New("TextLabel", {
            BackgroundTransparency = 1,
            Size = UDim2.new(0.5, 0, 1, 0),
            Position = UDim2.new(0, 8, 0, 0),
            Font = Enum.Font.SourceSansSemibold,
            Text = text,
            TextColor3 = Colors.Text,
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left,
            Parent = holder
        })

        local box = New("TextBox", {
            Size = UDim2.new(0.47, 0, 0, 20),
            Position = UDim2.new(0.5, 0, 0.5, -10),
            BackgroundColor3 = Colors.Panel,
            BorderSizePixel = 0,
            Font = Enum.Font.SourceSans,
            PlaceholderText = placeholder or "",
            PlaceholderColor3 = Colors.Muted,
            Text = "",
            TextColor3 = Colors.Text,
            TextSize = 13,
            ClearTextOnFocus = false,
            Parent = holder
        })

        box.FocusLost:Connect(function(enter)
            if enter and callback then pcall(callback, box.Text) end
            if getgenv().ClearTextBoxText then
                task.wait(0.1)
                box.Text = ""
            end
        end)
    end

    return api
end

-- 允许外部设置标题：library.Name = "xxx"
setmetatable(library, {
    __newindex = function(self, k, v)
        if k == "Name" and typeof(v) == "string" then
            titleLabel.Text = v
        else rawset(self, k, v) end
    end
})

return library