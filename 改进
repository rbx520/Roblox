-- 完整的现代化UI系统（修复黑色主题配色）
local a = {
    Plrs = "Players",
    LP = "LocalPlayer", 
    RS = "ReplicatedStorage"
}

local b = setmetatable({}, {
    __index = function(self, c)
        return game:GetService(c)
    end,
    __call = function(self, c)
        return game:GetService(c)
    end
})

if b.CoreGui:FindFirstChild(_CONFIGS.UI_NAME) then
    b.CoreGui[_CONFIGS.UI_NAME]:Destroy()
end

local dm = UDim.new
local dn = UDim2.new
local dp = Color3.fromRGB
local dq = Instance.new
local dr = function() end
local ds = b.Players.LocalPlayer:GetMouse()

-- 主题系统（恢复原始黑色配色）
local Themes = {
    Dark = {
        Primary = dp(52, 62, 72),      -- 原始深色背景
        Secondary = dp(58, 69, 80),     -- 原始次要背景
        Tertiary = dp(52, 62, 72),      -- 原始第三背景
        Accent = dp(100, 120, 255),     -- 蓝色强调色
        Success = dp(53, 255, 134),     -- 绿色成功色
        Danger = dp(255, 83, 83),       -- 红色危险色
        Warning = dp(255, 179, 71),     -- 橙色警告色
        Text = dp(255, 255, 255),       -- 白色文本
        TextDim = dp(180, 180, 180),    -- 次要文本
        TextMuted = dp(120, 120, 120),  -- 静音文本
        Border = dp(58, 69, 80),        -- 边框色（与Secondary相同）
        Shadow = dp(0, 0, 0),           -- 阴影色
        MinimizeBtn = dp(58, 69, 80),   -- 最小化按钮背景
        MinimizeBorder = dp(58, 69, 80) -- 最小化按钮边框
    },
    Light = {
        Primary = dp(255, 255, 255),
        Secondary = dp(245, 246, 250),
        Tertiary = dp(235, 237, 242),
        Accent = dp(88, 101, 242),
        Success = dp(34, 197, 94),
        Danger = dp(239, 68, 68),
        Warning = dp(245, 158, 11),
        Text = dp(17, 24, 39),
        TextDim = dp(75, 85, 99),
        TextMuted = dp(156, 163, 175),
        Border = dp(229, 231, 235),
        Shadow = dp(0, 0, 0),
        MinimizeBtn = dp(255, 255, 255),    -- 最小化按钮白色背景
        MinimizeBorder = dp(229, 231, 235)  -- 最小化按钮边框
    }
}

-- 默认使用黑色主题
local CurrentTheme = "Dark"
local Theme = Themes[CurrentTheme]

getgenv().library = {
    flags = {
        GetState = function(dt, du)
            return library.flags[du] and library.flags[du].State or nil
        end
    },
    modules = {},
    currentTab = nil,
    theme = CurrentTheme
}

-- 切换主题函数
function library:SetTheme(themeName)
    if not Themes[themeName] then return end
    
    CurrentTheme = themeName
    Theme = Themes[themeName]
    library.theme = themeName
    
    -- 更新所有UI元素的颜色
    if library.updateTheme then
        library.updateTheme()
    end
end

function library:UpdateToggle(du, be)
    local be = be or library.flags:GetState(du)
    if be == library.flags:GetState(du) then
        return
    end
    library.flags[du]:SetState(be)
end

local dv = {}

-- 优化的Tween函数
function dv:Tween(props, object, duration, style, direction)
    local tween = b.TweenService:Create(
        object,
        TweenInfo.new(
            duration or 0.25,
            style or Enum.EasingStyle.Linear,
            direction or Enum.EasingDirection.InOut
        ),
        props
    )
    tween:Play()
    return tween
end

-- 切换标签（恢复原始动画）
function dv:SwitchTab(newTab)
    local oldTab = library.currentTab
    if oldTab == newTab then return end
    
    library.currentTab = newTab
    
    if oldTab then
        dv:Tween({Transparency = 1}, oldTab[2].Glow, 0.25)
        oldTab[1].Visible = false
    end
    
    dv:Tween({Transparency = 0}, newTab[2].Glow, 0.25)
    newTab[1].Visible = true
end

-- 创建主界面
local dD = dq("ScreenGui")
local Open = dq("TextButton")
local OpenCorner = dq("UICorner")
local OpenBorder = dq("UIStroke")
local dE = dq("Frame")
local dF = dq("UICorner")
local dG = dq("TextLabel")
local dH = dq("UICorner")
local dI = dq("Frame")
local dJ = dq("UICorner")
local dK = dq("ScrollingFrame")
local dL = dq("UIListLayout")
local dM = dq("UIPadding")
local dN = dq("Frame")
local dO = dq("UICorner")

-- 主题切换按钮
local ThemeToggle = dq("TextButton")
local ThemeCorner = dq("UICorner")

-- 阴影效果（仅白色主题）
local MainShadow = dq("Frame")
local ShadowCorner = dq("UICorner")

dD.Name = _CONFIGS.UI_NAME
dD.Parent = b.CoreGui
dD.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

-- 阴影层（白色主题用）
MainShadow.Name = "Shadow"
MainShadow.Parent = dD
MainShadow.BackgroundColor3 = dp(0, 0, 0)
MainShadow.BackgroundTransparency = 0.85
MainShadow.BorderSizePixel = 0
MainShadow.Position = dn(0.5, 2, 0.5, 2)
MainShadow.Size = dn(0, 448, 0, 280)
MainShadow.AnchorPoint = Vector2.new(0.5, 0.5)
MainShadow.ZIndex = 0
MainShadow.Visible = CurrentTheme == "Light"

ShadowCorner.CornerRadius = dm(0, 8)
ShadowCorner.Parent = MainShadow

-- 主窗口（恢复原始尺寸）
dE.Name = "Main"
dE.Parent = dD
dE.BackgroundColor3 = Theme.Primary
dE.BorderSizePixel = 0
dE.Position = dn(0.5, 0, 0.5, 0)
dE.Size = dn(0, 448, 0, 280)
dE.AnchorPoint = Vector2.new(0.5, 0.5)
dE.Active = true
dE.Draggable = true
dE.ZIndex = 1

-- 添加边框（白色主题）
local MainBorder = dq("UIStroke")
MainBorder.Parent = dE
MainBorder.Color = Theme.Border
MainBorder.Thickness = 1
MainBorder.Transparency = CurrentTheme == "Dark" and 1 or 0

dF.CornerRadius = dm(0, 6)
dF.Name = "MainCorner"
dF.Parent = dE

-- 标题栏
dG.Parent = dE
dG.BackgroundColor3 = Theme.Secondary
dG.BorderSizePixel = 0
dG.Position = dn(0, 6, 0, 6)
dG.Size = dn(0, 436, 0, 24)
dG.Font = Enum.Font.GothamBold
dG.Text = "  " .. _CONFIGS.UI_NAME
dG.TextColor3 = Theme.Text
dG.TextSize = 14
dG.TextXAlignment = Enum.TextXAlignment.Left

dH.CornerRadius = dm(0, 6)
dH.Name = "TextLabelCorner"
dH.Parent = dG

-- 主题切换按钮
ThemeToggle.Name = "ThemeToggle"
ThemeToggle.Parent = dG
ThemeToggle.BackgroundColor3 = Theme.Tertiary
ThemeToggle.Position = dn(1, -28, 0.5, -9)
ThemeToggle.Size = dn(0, 18, 0, 18)
ThemeToggle.Text = CurrentTheme == "Dark" and "☀" or "🌙"
ThemeToggle.TextColor3 = Theme.Text
ThemeToggle.TextSize = 10
ThemeToggle.BorderSizePixel = 0
ThemeToggle.Font = Enum.Font.SourceSans

ThemeCorner.CornerRadius = dm(0, 4)
ThemeCorner.Parent = ThemeToggle

-- 隐藏/显示按钮（添加主题区分）
Open.Name = "Open"
Open.Parent = dD
Open.BackgroundColor3 = Theme.MinimizeBtn
Open.Position = dn(0.84, 0, 0, 10)
Open.BorderSizePixel = 0
Open.Size = dn(0, 55, 0, 25)
Open.Font = Enum.Font.SourceSans
Open.Text = "隐藏"
Open.TextColor3 = Theme.Text
Open.TextSize = 14
Open.Active = true
Open.Draggable = true
Open.ZIndex = 2

OpenCorner.CornerRadius = dm(0, 4)
OpenCorner.Parent = Open

-- 最小化按钮边框
OpenBorder.Parent = Open
OpenBorder.Color = Theme.MinimizeBorder
OpenBorder.Thickness = CurrentTheme == "Dark" and 2 or 1
OpenBorder.Transparency = 0

local TOGGLE = true
Open.MouseButton1Click:Connect(function()
    TOGGLE = not TOGGLE
    dE.Visible = TOGGLE
    MainShadow.Visible = TOGGLE and CurrentTheme == "Light"
    Open.Text = TOGGLE and "隐藏" or "打开"
end)

-- 侧边栏
dI.Name = "Sidebar"
dI.Parent = dE
dI.BackgroundColor3 = Theme.Secondary
dI.BorderSizePixel = 0
dI.Position = dn(0, 6, 0, 36)
dI.Size = dn(0, 106, 0, 238)

dJ.CornerRadius = dm(0, 6)
dJ.Name = "SidebarCorner"
dJ.Parent = dI

-- 标签按钮容器
dK.Name = "TabButtons"
dK.Parent = dI
dK.Active = true
dK.BackgroundColor3 = dp(255, 255, 255)
dK.BackgroundTransparency = 1
dK.BorderSizePixel = 0
dK.Size = dn(0, 106, 0, 238)
dK.ScrollBarThickness = 0

dL.Parent = dK
dL.HorizontalAlignment = Enum.HorizontalAlignment.Center
dL.SortOrder = Enum.SortOrder.LayoutOrder
dL.Padding = dm(0, 5)

dM.Parent = dK
dM.PaddingTop = dm(0, 6)

-- 内容区域
dN.Name = "TabHolder"
dN.Parent = dE
dN.BackgroundColor3 = Theme.Secondary
dN.BorderSizePixel = 0
dN.Position = dn(0, 118, 0, 36)
dN.Size = dn(0, 324, 0, 238)

dO.CornerRadius = dm(0, 6)
dO.Name = "TabHolderCorner"
dO.Parent = dN

dL:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
    dK.CanvasSize = dn(0, 0, 0, dL.AbsoluteContentSize.Y + 12)
end)

-- 主题更新函数
local themeElements = {
    {dE, "BackgroundColor3", "Primary"},
    {dG, "BackgroundColor3", "Secondary"},
    {dG, "TextColor3", "Text"},
    {dI, "BackgroundColor3", "Secondary"},
    {dN, "BackgroundColor3", "Secondary"},
    {Open, "BackgroundColor3", "MinimizeBtn"},
    {Open, "TextColor3", "Text"},
    {OpenBorder, "Color", "MinimizeBorder"},
    {ThemeToggle, "BackgroundColor3", "Tertiary"},
    {ThemeToggle, "TextColor3", "Text"},
    {MainBorder, "Color", "Border"}
}

library.updateTheme = function()
    Theme = Themes[CurrentTheme]
    
    for _, element in pairs(themeElements) do
        element[1][element[2]] = Theme[element[3]]
    end
    
    -- 更新主题图标
    ThemeToggle.Text = CurrentTheme == "Dark" and "☀" or "🌙"
    
    -- 更新阴影
    MainShadow.Visible = CurrentTheme == "Light" and dE.Visible
    
    -- 更新边框
    MainBorder.Transparency = CurrentTheme == "Dark" and 1 or 0
    OpenBorder.Thickness = CurrentTheme == "Dark" and 2 or 1
    
    -- 更新所有标签页的元素
    for _, module in pairs(library.modules) do
        if module.update then
            module.update()
        end
    end
end

-- 主题切换按钮事件
ThemeToggle.MouseButton1Click:Connect(function()
    library:SetTheme(CurrentTheme == "Dark" and "Light" or "Dark")
end)

-- 通知系统
function createBaseNotifications()
    if b.Players.LocalPlayer.PlayerGui:FindFirstChild("NotificationHolder") then
        return b.Players.LocalPlayer.PlayerGui.NotificationHolder
    end
    
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "NotificationHolder"
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    -- 选择通知
    local ToggleNotif = Instance.new("Frame")
    ToggleNotif.Name = "ToggleNotif"
    ToggleNotif.ZIndex = 5
    ToggleNotif.AnchorPoint = Vector2.new(1, 1)
    ToggleNotif.Visible = false
    ToggleNotif.Size = UDim2.new(0, 291, 0, 56)
    ToggleNotif.Position = UDim2.new(1, 0, 1, 0)
    ToggleNotif.BackgroundColor3 = dp(48, 48, 48)
    ToggleNotif.Parent = ScreenGui
    
    local UiCorner = Instance.new("UICorner")
    UiCorner.CornerRadius = dm(0, 6)
    UiCorner.Parent = ToggleNotif
    
    local Dropshadow = Instance.new("UIStroke")
    Dropshadow.Name = "Dropshadow"
    Dropshadow.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    Dropshadow.Transparency = 0.8
    Dropshadow.Thickness = 2
    Dropshadow.Color = dp(20, 20, 20)
    Dropshadow.Parent = ToggleNotif
    
    local SepVertical = Instance.new("Frame")
    SepVertical.Name = "SepVertical"
    SepVertical.Size = UDim2.new(0, 2, 0, 56)
    SepVertical.BackgroundTransparency = 0.5
    SepVertical.Position = UDim2.new(0.7423077, 0, 0, 0)
    SepVertical.BorderSizePixel = 0
    SepVertical.BackgroundColor3 = dp(68, 68, 68)
    SepVertical.Parent = ToggleNotif
    
    local SepHorizontal = Instance.new("Frame")
    SepHorizontal.Name = "SepHorizontal"
    SepHorizontal.Size = UDim2.new(0, 72, 0, 2)
    SepHorizontal.BackgroundTransparency = 0.5
    SepHorizontal.Position = UDim2.new(0.75, 0, 0.4464286, 2)
    SepHorizontal.BorderSizePixel = 0
    SepHorizontal.BackgroundColor3 = dp(68, 68, 68)
    SepHorizontal.Parent = ToggleNotif
    
    local Title = Instance.new("TextLabel")
    Title.Name = "Title"
    Title.Size = UDim2.new(0, 216, 0, 19)
    Title.BackgroundTransparency = 1
    Title.BorderSizePixel = 0
    Title.BackgroundColor3 = dp(255, 255, 255)
    Title.FontSize = Enum.FontSize.Size14
    Title.TextSize = 14
    Title.TextColor3 = dp(255, 255, 255)
    Title.Font = Enum.Font.SourceSans
    Title.Parent = ToggleNotif
    
    local Paragraph = Instance.new("TextLabel")
    Paragraph.Name = "Paragraph"
    Paragraph.Size = UDim2.new(0, 218, 0, 37)
    Paragraph.BackgroundTransparency = 1
    Paragraph.Position = UDim2.new(0, 0, 0.3392857, 0)
    Paragraph.BackgroundColor3 = dp(255, 255, 255)
    Paragraph.FontSize = Enum.FontSize.Size14
    Paragraph.TextSize = 14
    Paragraph.TextColor3 = dp(255, 255, 255)
    Paragraph.Text = ""
    Paragraph.TextYAlignment = Enum.TextYAlignment.Top
    Paragraph.TextWrapped = true
    Paragraph.Font = Enum.Font.SourceSans
    Paragraph.TextXAlignment = Enum.TextXAlignment.Left
    Paragraph.Parent = ToggleNotif
    
    local UIPadding = Instance.new("UIPadding")
    UIPadding.PaddingLeft = UDim.new(0, 10)
    UIPadding.PaddingRight = UDim.new(0, 5)
    UIPadding.Parent = Paragraph
    
    local True = Instance.new("TextButton")
    True.Name = "True"
    True.Size = UDim2.new(0, 72, 0, 27)
    True.BackgroundTransparency = 1
    True.Position = UDim2.new(0.75, 0, 0, 0)
    True.BorderSizePixel = 0
    True.BackgroundColor3 = dp(255, 255, 255)
    True.FontSize = Enum.FontSize.Size14
    True.TextSize = 14
    True.TextColor3 = dp(255, 255, 255)
    True.Text = "Yes"
    True.Font = Enum.Font.SourceSans
    True.Parent = ToggleNotif
    
    local False = Instance.new("TextButton")
    False.Name = "False"
    False.Size = UDim2.new(0, 72, 0, 27)
    False.BackgroundTransparency = 1
    False.Position = UDim2.new(0.75, 0, 0.5178571, 0)
    False.BorderSizePixel = 0
    False.BackgroundColor3 = dp(255, 255, 255)
    False.FontSize = Enum.FontSize.Size14
    False.TextSize = 14
    False.TextColor3 = dp(255, 255, 255)
    False.Text = "No"
    False.Font = Enum.Font.SourceSans
    False.Parent = ToggleNotif
    
    -- 默认通知
    local DefaultNotif = Instance.new("Frame")
    DefaultNotif.Name = "DefaultNotif"
    DefaultNotif.ZIndex = 5
    DefaultNotif.AnchorPoint = Vector2.new(1, 1)
    DefaultNotif.Visible = false
    DefaultNotif.Size = UDim2.new(0, 291, 0, 56)
    DefaultNotif.Position = UDim2.new(1, 0, 1, 0)
    DefaultNotif.BackgroundColor3 = dp(48, 48, 48)
    DefaultNotif.Parent = ScreenGui
    
    local UiCorner1 = Instance.new("UICorner")
    UiCorner1.CornerRadius = dm(0, 6)
    UiCorner1.Parent = DefaultNotif
    
    local Dropshadow1 = Instance.new("UIStroke")
    Dropshadow1.Name = "Dropshadow"
    Dropshadow1.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    Dropshadow1.Transparency = 0.8
    Dropshadow1.Thickness = 2
    Dropshadow1.Color = dp(20, 20, 20)
    Dropshadow1.Parent = DefaultNotif
    
    local Title1 = Instance.new("TextLabel")
    Title1.Name = "Title"
    Title1.Size = UDim2.new(0, 291, 0, 19)
    Title1.BackgroundTransparency = 1
    Title1.BorderSizePixel = 0
    Title1.BackgroundColor3 = dp(255, 255, 255)
    Title1.FontSize = Enum.FontSize.Size14
    Title1.TextSize = 14
    Title1.TextColor3 = dp(255, 255, 255)
    Title1.Font = Enum.Font.SourceSans
    Title1.Parent = DefaultNotif
    
    local Paragraph1 = Instance.new("TextLabel")
    Paragraph1.Name = "Paragraph"
    Paragraph1.Size = UDim2.new(0, 291, 0, 37)
    Paragraph1.BackgroundTransparency = 1
    Paragraph1.Position = UDim2.new(0, 0, 0.3392857, 0)
    Paragraph1.BackgroundColor3 = dp(255, 255, 255)
    Paragraph1.FontSize = Enum.FontSize.Size14
    Paragraph1.TextSize = 14
    Paragraph1.TextColor3 = dp(255, 255, 255)
    Paragraph1.Text = ""
    Paragraph1.TextYAlignment = Enum.TextYAlignment.Top
    Paragraph1.TextWrapped = true
    Paragraph1.Font = Enum.Font.SourceSans
    Paragraph1.TextXAlignment = Enum.TextXAlignment.Left
    Paragraph1.Parent = DefaultNotif
    
    local UIPadding1 = Instance.new("UIPadding")
    UIPadding1.PaddingLeft = UDim.new(0, 10)
    UIPadding1.PaddingRight = UDim.new(0, 5)
    UIPadding1.Parent = Paragraph1
    
    if syn then
        syn.protect_gui(ScreenGui)
    end
    
    ScreenGui.Parent = b.Players.LocalPlayer.PlayerGui
    return ScreenGui
end

notificationHolder = createBaseNotifications()
notifAmount = 0
removedPos = nil

-- 通知函数
function library:SelectNotify(args)
    args = args or {}
    args.TweenSpeed = args.TweenSpeed or 1
    args.TweenInSpeed = args.TweenInSpeed or args.TweenSpeed
    args.TweenOutSpeed = args.TweenOutSpeed or args.TweenSpeed
    args.TweenVerticalSpeed = args.TweenVerticalSpeed or args.TweenSpeed
    args.Title = args.Title or "Title"
    args.Text = args.Text or "Text"
    args.TrueText = args.TrueText or "Yes"
    args.FalseText = args.FalseText or "No"
    args.Duration = args.Duration or 5
    args.Callback = args.Callback or function() warn("No callback for notif") end
    
    notifAmount = notifAmount + 1
    local track = notifAmount
    local notifNum = notifAmount
    local doesExist = true
    local notif = notificationHolder.ToggleNotif:Clone()
    local removed = false
    
    notif.Parent = notificationHolder
    notif.Visible = true
    notif.Position = UDim2.new(1, 300, 1, -5)
    notif.Transparency = 0.05
    notif.True.Text = args.TrueText
    notif.False.Text = args.FalseText
    
    task.spawn(function()
        task.wait(args.Duration + args.TweenInSpeed)
        doesExist = false
    end)
    
    notif.True.MouseButton1Click:Connect(function()
        doesExist = false
        removed = true
        notifAmount = notifAmount - 1
        removedPos = notif.Position.Y.Offset
        pcall(args.Callback, true)
    end)
    
    notif.False.MouseButton1Click:Connect(function()
        doesExist = false
        removed = true
        notifAmount = notifAmount - 1
        removedPos = notif.Position.Y.Offset
        pcall(args.Callback, false)
    end)
    
    notif.Paragraph.Text = args.Text
    notif.Title.Text = args.Title
    notif:TweenPosition(UDim2.new(1, -5, 1, -5), Enum.EasingDirection.Out, Enum.EasingStyle.Quint, args.TweenInSpeed)
    
    task.spawn(function()
        local originalPos = notif.Position
        while doesExist and task.wait() do
            local pos = notif.Position
            if notifAmount > track then
                notif:TweenPosition(UDim2.new(1, -5, 1, originalPos.Y.Offset - (65 * (notifAmount - notifNum))), Enum.EasingDirection.Out, Enum.EasingStyle.Quint, args.TweenVerticalSpeed, true)
                track = track + 1
            end
            if notifAmount < track then
                if removedPos > pos.Y.Offset then
                    notif:TweenPosition(UDim2.new(1, -5, 1, originalPos.Y.Offset - (65 * (notifAmount - notifNum))), Enum.EasingDirection.Out, Enum.EasingStyle.Quint, args.TweenVerticalSpeed, true)
                else
                    notifNum = notifNum - 1
                end
                track = track - 1
            end
        end
        local pos = notif.Position
        if removed == false then
            notifAmount = notifAmount - 1
            removedPos = notif.Position.Y.Offset
        end
        notif:TweenPosition(UDim2.new(1, 300, 1, pos.Y.Offset), Enum.EasingDirection.Out, Enum.EasingStyle.Quint, args.TweenOutSpeed, true)
        task.wait(args.TweenOutSpeed)
        notif:Destroy()
    end)
end

function library:Notify(args)
    args = args or {}
    args.TweenSpeed = args.TweenSpeed or 1
    args.TweenInSpeed = args.TweenInSpeed or args.TweenSpeed
    args.TweenOutSpeed = args.TweenOutSpeed or args.TweenSpeed
    args.TweenVerticalSpeed = args.TweenVerticalSpeed or args.TweenSpeed
    args.Title = args.Title or "Title"
    args.Text = args.Text or "Text"
    args.Duration = args.Duration or 5
    
    notifAmount = notifAmount + 1
    local track = notifAmount
    local notifNum = notifAmount
    local removed = false
    local doesExist = true
    local notif = notificationHolder.DefaultNotif:Clone()
    
    notif.Parent = notificationHolder
    notif.Visible = true
    notif.Position = UDim2.new(1, 300, 1, -5)
    notif.Transparency = 0.05
    
    notif.InputBegan:Connect(function(InputObject)
        if InputObject.UserInputType == Enum.UserInputType.MouseButton1 then
            task.spawn(function()
                local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Linear, Enum.EasingDirection.Out, 0, false, 0)
                game:GetService("TweenService"):Create(notif, tweenInfo, {Transparency = 0.8}):Play()
            end)
            doesExist = false
            removed = true
            notifAmount = notifAmount - 1
            removedPos = notif.Position.Y.Offset
        end
    end)
    
    task.spawn(function()
        task.wait(args.Duration + args.TweenInSpeed)
        doesExist = false
    end)
    
    notif.Paragraph.Text = args.Text
    notif.Title.Text = args.Title
    notif:TweenPosition(UDim2.new(1, -5, 1, -5), Enum.EasingDirection.Out, Enum.EasingStyle.Quint, args.TweenInSpeed)
    
    task.spawn(function()
        local originalPos = notif.Position
        while doesExist and task.wait() do
            local pos = notif.Position
            if notifAmount > track then
                notif:TweenPosition(UDim2.new(1, -5, 1, originalPos.Y.Offset - (65 * (notifAmount - notifNum))), Enum.EasingDirection.Out, Enum.EasingStyle.Quint, args.TweenVerticalSpeed, true)
                track = track + 1
            end
            if notifAmount < track then
                if removedPos > pos.Y.Offset then
                    notif:TweenPosition(UDim2.new(1, -5, 1, originalPos.Y.Offset - (65 * (notifAmount - notifNum))), Enum.EasingDirection.Out, Enum.EasingStyle.Quint, args.TweenVerticalSpeed, true)
                else
                    notifNum = notifNum - 1
                end
                track = track - 1
            end
        end
        local pos = notif.Position
        if removed == false then
            notifAmount = notifAmount - 1
            removedPos = notif.Position.Y.Offset
        end
        notif:TweenPosition(UDim2.new(1, 300, 1, pos.Y.Offset), Enum.EasingDirection.Out, Enum.EasingStyle.Quint, args.TweenOutSpeed, true)
        task.wait(args.TweenOutSpeed)
        notif:Destroy()
    end)
end

-- 创建标签页（恢复原始结构）
function library:CreateTab(tabName)
    local tabButton = dq("TextButton")
    local tabCorner = dq("UICorner")
    local tabGlow = dq("Frame")
    local glowCorner = dq("UICorner")
    local glowGradient = dq("UIGradient")
    local tabContent = dq("ScrollingFrame")
    local contentPadding = dq("UIPadding")
    local contentLayout = dq("UIListLayout")
    
    -- 标签按钮（恢复原始样式）
    tabButton.Name = "TabButton"
    tabButton.Parent = dK
    tabButton.BackgroundColor3 = Theme.Primary
    tabButton.BorderSizePixel = 0
    tabButton.Size = dn(0, 94, 0, 28)
    tabButton.AutoButtonColor = false
    tabButton.Font = Enum.Font.GothamSemibold
    tabButton.Text = tabName
    tabButton.TextColor3 = Theme.Text
    tabButton.TextSize = 14
    
    tabCorner.CornerRadius = dm(0, 6)
    tabCorner.Parent = tabButton
    
    -- 发光效果（恢复原始渐变）
    tabGlow.Name = "Glow"
    tabGlow.Parent = tabButton
    tabGlow.BackgroundColor3 = dp(255, 255, 255)
    tabGlow.BorderSizePixel = 0
    tabGlow.Position = dn(0, 0, 0.928571463, 0)
    tabGlow.Size = dn(0, 94, 0, 2)
    tabGlow.Transparency = 1
    
    glowCorner.CornerRadius = dm(0, 6)
    glowCorner.Parent = tabGlow
    
    glowGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0.00, Theme.Primary),
        ColorSequenceKeypoint.new(0.50, dp(255, 255, 255)),
        ColorSequenceKeypoint.new(1.00, Theme.Primary)
    }
    glowGradient.Name = "GlowGradient"
    glowGradient.Parent = tabGlow
    
    -- 内容区域
    tabContent.Name = "Tab"
    tabContent.Parent = dN
    tabContent.Active = true
    tabContent.BackgroundColor3 = dp(255, 255, 255)
    tabContent.BackgroundTransparency = 1
    tabContent.BorderSizePixel = 0
    tabContent.Size = dn(0, 324, 0, 238)
    tabContent.ScrollBarThickness = 0
    tabContent.Visible = false
    
    if library.currentTab == nil then
        library.currentTab = {tabContent, tabButton}
        tabGlow.Transparency = 0
        tabContent.Visible = true
    end
    
    contentPadding.Parent = tabContent
    contentPadding.PaddingTop = dm(0, 6)
    
    contentLayout.Parent = tabContent
    contentLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
    contentLayout.Padding = dm(0, 5)
    
    contentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        tabContent.CanvasSize = dn(0, 0, 0, contentLayout.AbsoluteContentSize.Y + 12)
    end)
    
    tabButton.MouseButton1Click:Connect(function()
        dv:SwitchTab({tabContent, tabButton})
    end)
    
    local tabFunctions = {}
    local tabElements = {}
    
    -- 添加主题更新支持
    table.insert(library.modules, {
        elements = tabElements,
        update = function()
            for _, elem in pairs(tabElements) do
                if elem.object and elem.property and elem.theme then
                    elem.object[elem.property] = Theme[elem.theme]
                end
            end
        end
    })
    
    -- 分隔符
    function tabFunctions:NewSeparator()
        local sep = dq("Frame")
        sep.Transparency = 1
        sep.Size = dn(0, 0, 0, 0)
        sep.BorderSizePixel = 0
        sep.Parent = tabContent
    end
    
    -- 按钮
    function tabFunctions:NewButton(text, callback)
        local callback = callback or dr
        
        local button = dq("TextButton")
        local corner = dq("UICorner")
        
        button.Name = "BtnModule"
        button.Parent = tabContent
        button.BackgroundColor3 = Theme.Primary
        button.BorderSizePixel = 0
        button.Size = dn(0, 312, 0, 28)
        button.AutoButtonColor = false
        button.Font = Enum.Font.GothamSemibold
        button.Text = "  " .. text
        button.TextColor3 = Theme.Text
        button.TextSize = 14
        button.TextXAlignment = Enum.TextXAlignment.Left
        
        corner.CornerRadius = dm(0, 6)
        corner.Parent = button
        
        button.MouseButton1Click:Connect(callback)
        
        table.insert(tabElements, {object = button, property = "BackgroundColor3", theme = "Primary"})
        table.insert(tabElements, {object = button, property = "TextColor3", theme = "Text"})
    end
    
    -- 开关（恢复原始样式）
    function tabFunctions:NewToggle(text, flag, default, callback)
        local callback = callback or dr
        local default = default or false
        
        local toggle = dq("TextButton")
        local corner = dq("UICorner")
        local offStatus = dq("Frame")
        local offGrad = dq("UIGradient")
        local offCorner = dq("UICorner")
        local onStatus = dq("Frame")
        local onCorner = dq("UICorner")
        local onGrad = dq("UIGradient")
        
        library.flags[flag or text] = {
            State = false,
            Callback = callback,
            SetState = function(self, state)
                state = state ~= nil and state or not library.flags:GetState(flag)
                library.flags[flag].State = state
                
                task.spawn(function()
                    library.flags[flag].Callback(state)
                end)
                
                dv:Tween({Transparency = state and 1 or 0}, offStatus)
                dv:Tween({Transparency = state and 0 or 1}, onStatus)
            end
        }
        
        toggle.Name = "ToggleModule"
        toggle.Parent = tabContent
        toggle.BackgroundColor3 = Theme.Primary
        toggle.BorderSizePixel = 0
        toggle.Size = dn(0, 312, 0, 28)
        toggle.AutoButtonColor = false
        toggle.Font = Enum.Font.GothamSemibold
        toggle.Text = "  " .. text
        toggle.TextColor3 = Theme.Text
        toggle.TextSize = 14
        toggle.TextXAlignment = Enum.TextXAlignment.Left
        
        corner.CornerRadius = dm(0, 6)
        corner.Parent = toggle
        
        -- 关闭状态
        offStatus.Name = "OffStatus"
        offStatus.Parent = toggle
        offStatus.BackgroundColor3 = dp(255, 255, 255)
        offStatus.BorderSizePixel = 0
        offStatus.Position = dn(0.878205061, 0, 0.178571433, 0)
        offStatus.Size = dn(0, 34, 0, 18)
        
        offGrad.Color = ColorSequence.new{
            ColorSequenceKeypoint.new(0.00, dp(255, 83, 83)),
            ColorSequenceKeypoint.new(0.15, dp(255, 83, 83)),
            ColorSequenceKeypoint.new(0.62, Theme.Primary),
            ColorSequenceKeypoint.new(1.00, Theme.Primary)
        }
        offGrad.Rotation = 300
        offGrad.Parent = offStatus
        
        offCorner.CornerRadius = dm(0, 4)
        offCorner.Parent = offStatus
        
        -- 开启状态
        onStatus.Name = "OnStatus"
        onStatus.Parent = toggle
        onStatus.BackgroundColor3 = dp(255, 255, 255)
        onStatus.BackgroundTransparency = 1
        onStatus.BorderSizePixel = 0
        onStatus.Position = dn(0.878205121, 0, 0.178571433, 0)
        onStatus.Size = dn(0, 34, 0, 18)
        onStatus.Transparency = 1
        
        onCorner.CornerRadius = dm(0, 4)
        onCorner.Parent = onStatus
        
        onGrad.Color = ColorSequence.new{
            ColorSequenceKeypoint.new(0.00, Theme.Primary),
            ColorSequenceKeypoint.new(0.38, dp(48, 57, 67)),
            ColorSequenceKeypoint.new(1.00, dp(53, 255, 134))
        }
        onGrad.Rotation = 300
        onGrad.Parent = onStatus
        
        toggle.MouseButton1Click:Connect(function()
            library.flags[flag or text]:SetState()
        end)
        
        if default then
            library.flags[flag or text]:SetState(default)
        end
        
        table.insert(tabElements, {object = toggle, property = "BackgroundColor3", theme = "Primary"})
        table.insert(tabElements, {object = toggle, property = "TextColor3", theme = "Text"})
    end
    
    -- 按键绑定（修复版）
    function tabFunctions:NewBind(text, default, callback)
        local blacklist = {
            Return = true,
            Space = true,
            Tab = true,
            Backquote = true,
            CapsLock = true,
            Escape = true,
            Unknown = true
        }
        
        local shortNames = {
            RightControl = "Right Ctrl",
            LeftControl = "Left Ctrl",
            LeftShift = "Left Shift",
            RightShift = "Right Shift",
            Semicolon = ";",
            Quote = '"',
            LeftBracket = "[",
            RightBracket = "]",
            Equals = "=",
            Minus = "-",
            RightAlt = "Right Alt",
            LeftAlt = "Left Alt"
        }
        
        local currentKey = default and Enum.KeyCode[default] or nil
        local keyText = currentKey and (shortNames[currentKey.Name] or currentKey.Name) or "None"
        
        local bind = dq("TextButton")
        local corner = dq("UICorner")
        local keyButton = dq("TextButton")
        local keyCorner = dq("UICorner")
        
        bind.Name = "KeybindModule"
        bind.Parent = tabContent
        bind.BackgroundColor3 = Theme.Primary
        bind.BorderSizePixel = 0
        bind.Size = dn(0, 312, 0, 28)
        bind.AutoButtonColor = false
        bind.Font = Enum.Font.GothamSemibold
        bind.Text = "  " .. text
        bind.TextColor3 = Theme.Text
        bind.TextSize = 14
        bind.TextXAlignment = Enum.TextXAlignment.Left
        
        corner.CornerRadius = dm(0, 6)
        corner.Parent = bind
        
        keyButton.Parent = bind
        keyButton.BackgroundColor3 = Theme.Secondary
        keyButton.BorderSizePixel = 0
        keyButton.Position = dn(0.75, 0, 0.178571433, 0)
        keyButton.Size = dn(0, 74, 0, 18)
        keyButton.AutoButtonColor = false
        keyButton.Font = Enum.Font.Gotham
        keyButton.Text = keyText
        keyButton.TextColor3 = Theme.Text
        keyButton.TextSize = 12
        
        keyCorner.CornerRadius = dm(0, 4)
        keyCorner.Parent = keyButton
        
        b.UserInputService.InputBegan:Connect(function(input, processed)
            if processed then return end
            if input.UserInputType ~= Enum.UserInputType.Keyboard then return end
            if input.KeyCode ~= currentKey then return end
            callback(currentKey.Name)
        end)
        
        keyButton.MouseButton1Click:Connect(function()
            keyButton.Text = "..."
            wait()
            local inputEnded, _ = b.UserInputService.InputEnded:Wait()
            local keyName = tostring(inputEnded.KeyCode.Name)
            
            if inputEnded.UserInputType ~= Enum.UserInputType.Keyboard then
                keyButton.Text = keyText
                return
            end
            
            if blacklist[keyName] then
                keyButton.Text = keyText
                return
            end
            
            wait()
            currentKey = Enum.KeyCode[keyName]
            keyButton.Text = shortNames[keyName] or keyName
        end)
        
        table.insert(tabElements, {object = bind, property = "BackgroundColor3", theme = "Primary"})
        table.insert(tabElements, {object = bind, property = "TextColor3", theme = "Text"})
        table.insert(tabElements, {object = keyButton, property = "BackgroundColor3", theme = "Secondary"})
        table.insert(tabElements, {object = keyButton, property = "TextColor3", theme = "Text"})
    end
    
    -- 滑块（修复版）
    function tabFunctions:NewSlider(text, flag, default, min, max, float, callback)
        local default = default or min
        local callback = callback or dr
        
        local slider = dq("TextButton")
        local corner = dq("UICorner")
        local sliderBar = dq("Frame")
        local barCorner = dq("UICorner")
        local sliderFill = dq("Frame")
        local fillCorner = dq("UICorner")
        local sliderValue = dq("TextBox")
        local valueCorner = dq("UICorner")
        local addButton = dq("TextButton")
        local minusButton = dq("TextButton")
        
        library.flags[flag] = {
            State = default,
            SetValue = function(self, val)
                local percent = (ds.X - sliderBar.AbsolutePosition.X) / sliderBar.AbsoluteSize.X
                
                if val then
                    percent = (val - min) / (max - min)
                end
                
                percent = math.clamp(percent, 0, 1)
                
                if float then
                    val = val or tonumber(string.format("%.1f", tostring(min + (max - min) * percent)))
                else
                    val = val or math.floor(min + (max - min) * percent)
                end
                
                library.flags[flag].State = tonumber(val)
                sliderValue.Text = tostring(val)
                sliderFill.Size = dn(percent, 0, 1, 0)
                callback(tonumber(val))
            end
        }
        
        slider.Name = "SliderModule"
        slider.Parent = tabContent
        slider.BackgroundColor3 = Theme.Primary
        slider.BorderSizePixel = 0
        slider.Position = dn(0, 0, -0.140425533, 0)
        slider.Size = dn(0, 312, 0, 28)
        slider.AutoButtonColor = false
        slider.Font = Enum.Font.GothamSemibold
        slider.Text = "  " .. text
        slider.TextColor3 = Theme.Text
        slider.TextSize = 14
        slider.TextXAlignment = Enum.TextXAlignment.Left
        
        corner.CornerRadius = dm(0, 6)
        corner.Parent = slider
        
        sliderBar.Name = "SliderBar"
        sliderBar.Parent = slider
        sliderBar.BackgroundColor3 = Theme.Secondary
        sliderBar.BorderSizePixel = 0
        sliderBar.Position = dn(0.442307681, 0, 0.392857134, 0)
        sliderBar.Size = dn(0, 108, 0, 6)
        
        barCorner.CornerRadius = dm(0, 2)
        barCorner.Parent = sliderBar
        
        sliderFill.Name = "SliderPart"
        sliderFill.Parent = sliderBar
        sliderFill.BackgroundColor3 = dp(255, 255, 255)
        sliderFill.BorderSizePixel = 0
        sliderFill.Size = dn(0, 0, 0, 6)
        
        fillCorner.CornerRadius = dm(0, 2)
        fillCorner.Parent = sliderFill
        
        sliderValue.Name = "SliderValue"
        sliderValue.Parent = slider
        sliderValue.BackgroundColor3 = Theme.Secondary
        sliderValue.BorderSizePixel = 0
        sliderValue.Position = dn(0.884615362, 0, 0.178571433, 0)
        sliderValue.Size = dn(0, 32, 0, 18)
        sliderValue.Font = Enum.Font.Gotham
        sliderValue.Text = default or min
        sliderValue.TextColor3 = Theme.Text
        sliderValue.TextSize = 12
        
        valueCorner.CornerRadius = dm(0, 4)
        valueCorner.Parent = sliderValue
        
        addButton.Name = "AddSlider"
        addButton.Parent = slider
        addButton.BackgroundColor3 = dp(255, 255, 255)
        addButton.BackgroundTransparency = 1
        addButton.BorderSizePixel = 0
        addButton.Position = dn(0.807692289, 0, 0.178571433, 0)
        addButton.Size = dn(0, 18, 0, 18)
        addButton.Font = Enum.Font.Gotham
        addButton.Text = "+"
        addButton.TextColor3 = Theme.Text
        addButton.TextSize = 18
        
        minusButton.Name = "MinusSlider"
        minusButton.Parent = slider
        minusButton.BackgroundColor3 = dp(255, 255, 255)
        minusButton.BackgroundTransparency = 1
        minusButton.BorderSizePixel = 0
        minusButton.Position = dn(0.365384609, 0, 0.178571433, 0)
        minusButton.Size = dn(0, 18, 0, 18)
        minusButton.Font = Enum.Font.Gotham
        minusButton.Text = "-"
        minusButton.TextColor3 = Theme.Text
        minusButton.TextSize = 18
        
        minusButton.MouseButton1Click:Connect(function()
            local current = library.flags:GetState(flag)
            current = math.clamp(current - 1, min, max)
            library.flags[flag]:SetValue(current)
        end)
        
        addButton.MouseButton1Click:Connect(function()
            local current = library.flags:GetState(flag)
            current = math.clamp(current + 1, min, max)
            library.flags[flag]:SetValue(current)
        end)
        
        library.flags[flag]:SetValue(default)
        
        local dragging = false
        local focused = false
        local allowed = {[""] = true, ["-"] = true}
        
        sliderBar.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                library.flags[flag]:SetValue()
                dragging = true
            end
        end)
        
        b.UserInputService.InputEnded:Connect(function(input)
            if dragging and (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then
                dragging = false
            end
        end)
        
        b.UserInputService.InputChanged:Connect(function(input)
            if dragging then
                library.flags[flag]:SetValue()
            end
        end)
        
        sliderValue.Focused:Connect(function()
            focused = true
        end)
        
        sliderValue.FocusLost:Connect(function()
            focused = false
            if sliderValue.Text == "" then
                library.flags[flag]:SetValue(default)
            end
        end)
        
        sliderValue:GetPropertyChangedSignal("Text"):Connect(function()
            if not focused then return end
            sliderValue.Text = sliderValue.Text:gsub("%D+", "")
            local text = sliderValue.Text
            if not tonumber(text) then
                sliderValue.Text = sliderValue.Text:gsub("%D+", "")
            elseif not allowed[text] then
                if tonumber(text) > max then
                    text = max
                    sliderValue.Text = tostring(max)
                end
                library.flags[flag]:SetValue(tonumber(text))
            end
        end)
        
        table.insert(tabElements, {object = slider, property = "BackgroundColor3", theme = "Primary"})
        table.insert(tabElements, {object = slider, property = "TextColor3", theme = "Text"})
        table.insert(tabElements, {object = sliderBar, property = "BackgroundColor3", theme = "Secondary"})
        table.insert(tabElements, {object = sliderValue, property = "BackgroundColor3", theme = "Secondary"})
        table.insert(tabElements, {object = sliderValue, property = "TextColor3", theme = "Text"})
        table.insert(tabElements, {object = addButton, property = "TextColor3", theme = "Text"})
        table.insert(tabElements, {object = minusButton, property = "TextColor3", theme = "Text"})
    end
    
    -- 下拉菜单（恢复原始样式）
    function tabFunctions:NewDropdown(text, flag, options, callback)
        local callback = callback or dr
        
        library.flags[flag] = {State = options[1]}
        
        local dropdown = dq("TextButton")
        local corner = dq("UICorner")
        local dropText = dq("TextBox")
        local openButton = dq("TextButton")
        local dropBottom = dq("TextButton")
        local bottomCorner = dq("UICorner")
        local bottomLayout = dq("UIListLayout")
        local bottomPadding = dq("UIPadding")
        
        dropdown.Name = "DropdownModule"
        dropdown.Parent = tabContent
        dropdown.BackgroundColor3 = Theme.Primary
        dropdown.BorderSizePixel = 0
        dropdown.Size = dn(0, 312, 0, 28)
        dropdown.AutoButtonColor = false
        dropdown.Font = Enum.Font.GothamSemibold
        dropdown.Text = ""
        dropdown.TextColor3 = Theme.Text
        dropdown.TextSize = 14
        dropdown.TextXAlignment = Enum.TextXAlignment.Left
        
        corner.CornerRadius = dm(0, 6)
        corner.Parent = dropdown
        
        dropText.Name = "DropdownText"
        dropText.Parent = dropdown
        dropText.BackgroundColor3 = dp(255, 255, 255)
        dropText.BackgroundTransparency = 1
        dropText.Position = dn(0.025641026, 0, 0, 0)
        dropText.Size = dn(0, 192, 0, 28)
        dropText.Font = Enum.Font.GothamSemibold
        dropText.PlaceholderText = text
        dropText.PlaceholderColor3 = Theme.Text
        dropText.TextColor3 = Theme.Text
        dropText.TextSize = 14
        dropText.TextXAlignment = Enum.TextXAlignment.Left
        dropText.Text = ""
        
        openButton.Name = "OpenDropdown"
        openButton.Parent = dropdown
        openButton.BackgroundColor3 = dp(255, 255, 255)
        openButton.BackgroundTransparency = 1
        openButton.BorderSizePixel = 0
        openButton.Position = dn(0.907051265, 0, 0.178571433, 0)
        openButton.Size = dn(0, 18, 0, 18)
        openButton.Font = Enum.Font.Gotham
        openButton.Text = "+"
        openButton.TextColor3 = Theme.Text
        openButton.TextSize = 22
        
        dropBottom.Name = "DropdownBottom"
        dropBottom.Parent = tabContent
        dropBottom.BackgroundColor3 = Theme.Primary
        dropBottom.BorderSizePixel = 0
        dropBottom.ClipsDescendants = true
        dropBottom.Position = dn(0.0185185187, 0, 0.206896558, 0)
        dropBottom.Size = dn(0, 312, 0, 0)
        dropBottom.AutoButtonColor = false
        dropBottom.Font = Enum.Font.GothamSemibold
        dropBottom.Text = ""
        dropBottom.TextColor3 = Theme.Text
        dropBottom.TextSize = 14
        dropBottom.TextXAlignment = Enum.TextXAlignment.Left
        dropBottom.Visible = false
        
        bottomCorner.CornerRadius = dm(0, 6)
        bottomCorner.Parent = dropBottom
        
        bottomLayout.Name = "DropdownBottomLayout"
        bottomLayout.Parent = dropBottom
        bottomLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
        bottomLayout.SortOrder = Enum.SortOrder.LayoutOrder
        bottomLayout.Padding = dm(0, 6)
        
        bottomPadding.Name = "DropdownBottomPadding"
        bottomPadding.Parent = dropBottom
        bottomPadding.PaddingTop = dm(0, 6)
        
        local isOpen = false
        
        bottomLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            if not isOpen then return end
            dv:Tween({Size = dn(0, 312, 0, bottomLayout.AbsoluteContentSize.Y + 12)}, dropBottom, 0.1)
        end)
        
        local function searchOptions(query)
            for _, element in next, dropBottom:GetChildren() do
                if element:IsA("TextButton") then
                    if string.find(element.Name:lower(), query:lower()) then
                        element.Visible = true
                    else
                        element.Visible = false
                    end
                end
            end
        end
        
        local function toggle()
            isOpen = not isOpen
            if isOpen then
                dropBottom.Visible = true
                searchOptions("")
            else
                task.spawn(function()
                    task.wait(0.35)
                    dropBottom.Visible = false
                end)
            end
            openButton.Text = isOpen and "-" or "+"
            dv:Tween({Size = dn(0, 312, 0, isOpen and bottomLayout.AbsoluteContentSize.Y + 12 or 0)}, dropBottom, 0.35)
        end
        
        openButton.MouseButton1Click:Connect(toggle)
        
        dropText.Focused:Connect(function()
            if isOpen then return end
            toggle()
        end)
        
        dropText:GetPropertyChangedSignal("Text"):Connect(function()
            searchOptions(dropText.Text)
        end)
        
        library.flags[flag].SetOptions = function(self, newOptions)
            library.flags[flag]:ClearOptions()
            for i = 1, #newOptions do
                library.flags[flag]:AddOption(newOptions[i])
            end
        end
        
        library.flags[flag].ClearOptions = function(self)
            for _, child in pairs(dropBottom:GetChildren()) do
                if child:IsA("TextButton") then
                    child:Destroy()
                end
            end
        end
        
        library.flags[flag].AddOption = function(self, option)
            local optionButton = dq("TextButton")
            local optionCorner = dq("UICorner")
            
            optionButton.Name = option
            optionButton.Parent = dropBottom
            optionButton.BackgroundColor3 = Theme.Secondary
            optionButton.BorderSizePixel = 0
            optionButton.Size = dn(0, 300, 0, 28)
            optionButton.AutoButtonColor = false
            optionButton.Font = Enum.Font.GothamSemibold
            optionButton.Text = option
            optionButton.TextColor3 = Theme.Text
            optionButton.TextSize = 14
            
            optionCorner.CornerRadius = dm(0, 6)
            optionCorner.Parent = optionButton
            
            optionButton.MouseButton1Click:Connect(function()
                dropText.PlaceholderText = option
                dropText.Text = ""
                library.flags[flag].State = option
                task.spawn(toggle)
                callback(option)
            end)
        end
        
        library.flags[flag].RemoveOption = function(self, option)
            dropBottom:WaitForChild(option):Destroy()
        end
        
        library.flags[flag]:SetOptions(options)
        
        table.insert(tabElements, {object = dropdown, property = "BackgroundColor3", theme = "Primary"})
        table.insert(tabElements, {object = dropText, property = "PlaceholderColor3", theme = "Text"})
        table.insert(tabElements, {object = dropText, property = "TextColor3", theme = "Text"})
        table.insert(tabElements, {object = openButton, property = "TextColor3", theme = "Text"})
        table.insert(tabElements, {object = dropBottom, property = "BackgroundColor3", theme = "Primary"})
    end
    
    -- 文本框
    function tabFunctions:NewBox(text, placeholder, callback)
        local callback = callback or dr
        
        local box = dq("TextButton")
        local corner = dq("UICorner")
        local textBox = dq("TextBox")
        local boxCorner = dq("UICorner")
        
        box.Name = "BoxModule"
        box.Parent = tabContent
        box.BackgroundColor3 = Theme.Primary
        box.BorderSizePixel = 0
        box.Position = dn(0, 0, -0.140425533, 0)
        box.Size = dn(0, 312, 0, 28)
        box.AutoButtonColor = false
        box.Font = Enum.Font.GothamSemibold
        box.Text = "  " .. text
        box.TextColor3 = Theme.Text
        box.TextSize = 14
        box.TextXAlignment = Enum.TextXAlignment.Left
        
        corner.CornerRadius = dm(0, 6)
        corner.Parent = box
        
        textBox.Name = "Box"
        textBox.Parent = box
        textBox.BackgroundColor3 = Theme.Secondary
        textBox.BorderSizePixel = 0
        textBox.Position = dn(0.774615362, 0, 0.178571433, 0)
        textBox.Size = dn(0, 65, 0, 18)
        textBox.Font = Enum.Font.Gotham
        textBox.Text = ""
        textBox.PlaceholderText = placeholder
        textBox.TextColor3 = Theme.Text
        textBox.TextSize = 12
        
        boxCorner.CornerRadius = dm(0, 4)
        boxCorner.Parent = textBox
        
        textBox.FocusLost:Connect(function(enterPressed)
            if not enterPressed then return end
            callback(textBox.Text)
            if getgenv().ClearTextBoxText then
                wait(0.10)
                textBox.Text = ""
            end
        end)
        
        table.insert(tabElements, {object = box, property = "BackgroundColor3", theme = "Primary"})
        table.insert(tabElements, {object = box, property = "TextColor3", theme = "Text"})
        table.insert(tabElements, {object = textBox, property = "BackgroundColor3", theme = "Secondary"})
        table.insert(tabElements, {object = textBox, property = "TextColor3", theme = "Text"})
    end
    
    return tabFunctions
end

-- 设置UI名称
setmetatable(getgenv().library, {
    __newindex = function(self, i, v)
        if i == 'Name' then
            dG.Text = "  " .. v
            return true
        end
        rawset(self, i, v)
    end
})

return library